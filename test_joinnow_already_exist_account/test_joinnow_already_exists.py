# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from basic_plan.config_reader import readconfig_file
from selenium.common.exceptions import TimeoutException


class TestJoinnow():
  def setup_method(self, method):
      self.driver = webdriver.Chrome()
      self.driver.maximize_window()
      self.vars = {}

  def teardown_method(self, method):
      self.driver.quit()

  def wait_for_element(self, by, value, timeout=10):
      return WebDriverWait(self.driver, timeout).until(EC.presence_of_element_located((by, value)))

  def test_joinnow(self):
    # Test name: join now
    # Step # | name | target | value
    # 1 | open | /login |
    self.driver.get(readconfig_file("Links", 'google_url'))
    self.driver.get(readconfig_file("Links", 'Login_Url'))


    # 3 | click | linkText=Join now! |
    join_now_button = self.wait_for_element(By.LINK_TEXT, "Join now!")
    join_now_button.click()

    # 4 | click | css=.border |
    border_element = self.wait_for_element(By.CSS_SELECTOR, ".border")
    border_element.click()

    # 5 | type | css=.border | dhanunjaya+1@sproutsai.com
    border_element.send_keys(readconfig_file("Join_now_emails", 'exists_join_email'))

    # 6 | click | css=.btn-primary |
    btn_primary_element = self.wait_for_element(By.CSS_SELECTOR, ".btn-primary")
    btn_primary_element.click()

    # Take user input for OTP
    #user_input_otp = input("Please enter the OTP: ")

    ## Extract the OTP input elements
    #otp_input_elements = self.driver.find_elements(By.CSS_SELECTOR, ".w-full input[type='text']")

    ## Send the OTP to each input field
    #for i, digit in enumerate(user_input_otp):
    #    otp_input_elements[i].send_keys(digit)

    time.sleep(23)

    # 7 | click | id=otp-input-0 |
    otp_input_element = self.wait_for_element(By.ID, "otp-input-0")
    otp_input_element.click()

    try:
        # 8 | click | css=.btn-primary |
        btn_primary_element = self.wait_for_element(By.CSS_SELECTOR, ".btn-primary")
        btn_primary_element.click()

        # 9 | click | name=password |
        password_element = self.wait_for_element(By.NAME, "password")
        password_element.click()

        # 10 | type | name=password | Qwerty@#123
        password_element.send_keys(readconfig_file("Join_now_emails", 'password'))

        # 11 | click | name=confirm |
        confirm_element = self.wait_for_element(By.NAME, "confirm")
        confirm_element.click()

        # 12 | type | name=confirm | Qwerty@#123
        confirm_element.send_keys(readconfig_file("Join_now_emails", 'password'))

        # 13 | click | id=show-pwd |
        show_pwd_element = self.wait_for_element(By.ID, "show-pwd")
        show_pwd_element.click()

        # 14 | click | css=.btn-primary |
        btn_primary_element = self.wait_for_element(By.CSS_SELECTOR, ".btn-primary")
        btn_primary_element.click()

        # 15 | click | css=.rounded-b-2xl > .text-base |
        rounded_element = self.wait_for_element(By.CSS_SELECTOR, ".rounded-b-2xl > .text-base")
        rounded_element.click()

        # 16 | click | css=.btn-primary |
        btn_primary_element = self.wait_for_element(By.CSS_SELECTOR, ".btn-primary")
        btn_primary_element.click()

        # 17 | click | css=.w-full:nth-child(3) |
        w_full_element = self.wait_for_element(By.XPATH, "//input[@placeholder='Your name']")
        w_full_element.click()

        # 18 | type | css=.w-full:nth-child(3) | dhanunjaya
        w_full_element.send_keys(readconfig_file("Join_now_emails", 'name'))

        # 19 | click | css=.PhoneInputInput |
        phone_input_element = self.wait_for_element(By.XPATH, "//input[@class='PhoneInputInput']")
        phone_input_element.click()

        # 20 | type | css=.PhoneInputInput | +91 97890 70869
        phone_input_element.send_keys(readconfig_file("Join_now_emails", 'phone'))

        # 21 | click | css=.\!btn-primary |
        btn_primary_element = self.wait_for_element(By.CSS_SELECTOR, ".\\!btn-primary")
        btn_primary_element.click()

        time.sleep(5)

        print(" account created Successfully at SproutsAI account")

        assert True, "Successfully created a SproutsAI account"
          

    except TimeoutException:
       
        try:
            
            # 17 | click | css=.w-full:nth-child(3) |
            w_full_element = self.wait_for_element(By.XPATH, "//input[@placeholder='Your name']")
            w_full_element.click()

            # 18 | type | css=.w-full:nth-child(3) | dhanunjaya
            w_full_element.send_keys(readconfig_file("Join_now_emails", 'name'))

            # 19 | click | css=.PhoneInputInput |
            phone_input_element = self.wait_for_element(By.XPATH, "//input[@class='PhoneInputInput']")
            phone_input_element.click()

            # 20 | type | css=.PhoneInputInput | +91 97890 70869
            phone_input_element.send_keys(readconfig_file("Join_now_emails", 'phone'))

            # 21 | click | css=.\!btn-primary |
            btn_primary_element = self.wait_for_element(By.CSS_SELECTOR, ".\\!btn-primary")
            btn_primary_element.click()

            time.sleep(5)

            print(" account created Successfully at SproutsAI account")

            assert True, "Successfully created a SproutsAI account"
            

        except TimeoutException:

            try:
                self.wait_for_element(By.XPATH, '//*[contains(text(),"Thank you for registering for a SproutsAI account.")]')

                print("already account exists at SproutsAI account")

                assert True, "Successfully created a SproutsAI account"
                

            except Exception as e:
                print(e)
                pytest.fail("Failed to create a SproutsAI account")

                